AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template deploys a Linux instance using Watchmaker, which applies the
  DISA STIG.
Parameters:
  AmiId:
    Description: >-
      ID of the AMI to launch.  As of August 2017, in UTTE, recommend ami-1fbe067e (Red Hat 7
      generic), ami-062a9167 (CentOS 6 spel), or ami-bcf373dd (CentOS 7 spel).
      Commercial AMI IDs will vary, but ami-46c1b650 is currently available for
      CentOS 7 in AWS Commercial.
    Type: String
    AllowedPattern: '^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$'
  AmiDistro:
    Description: >-
      Linux distro of the chosen AMI.  While AmazonLinux can be used for testing, it may not be available for Production
    Type: String
    AllowedValues:
      - AmazonLinux
      - CentOS
      - RedHat
  AppScriptParams:
    Description: >-
      Parameter string to pass to the application script. Ignored if
      "AppScriptUrl" is blank
    Type: String
  AppScriptShell:
    Description: >-
      Shell with which to execute the application script. Ignored if
      "AppScriptUrl" is blank
    Type: String
    Default: bash
    AllowedValues:
      - bash
      - python
  AppScriptUrl:
    Description: >-
      (Optional) Region-based HTTPS URL to the application script in an S3
      bucket. If using FIPS-enabled AMI, script must be KMS-encrypted. Leave
      blank to launch without an application script. If specified, an
      appropriate "InstanceRole" is required
    Type: String
    Default: ''
    AllowedPattern: '^$|^https://s3-(.*)$'
    ConstraintDescription: >-
      Must use a region-based HTTPS S3 endpoint (starts with "s3-"), see
      http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region
  AppVolumeDevice:
    Description: >-
      (Optional) Device to mount an extra EBS volume. Leave blank to launch
      without an extra application volume.  Adding an extra volume is highly recommended if you plan to install software.
    Type: String
    Default: ''
    AllowedValues:
      - ''
      - /dev/xvdf
      - /dev/xvdg
      - /dev/xvdh
      - /dev/xvdi
      - /dev/xvdj
  AppVolumeMountPath:
    Description: >-
      Filesystem path to mount the extra app volume. Ignored if
      "AppVolumeDevice" is blank.  Do not choose "/opt" as that will remove the aws tools
      installed to "/opt/aws"
    Type: String
    Default: /opt/extra
    AllowedPattern: /.*
  AppVolumeType:
    Description: Type of EBS volume to create. Ignored if "AppVolumeDevice" is blank
    Type: String
    Default: gp2
    AllowedValues:
      - gp2
      - io1
      - sc1
      - st1
      - standard
  AppVolumeSize:
    Description: >-
      Size in GB of the EBS volume to create. Ignored if "AppVolumeDevice" is
      blank
    Type: Number
    Default: '50'
    MinValue: '1'
    MaxValue: '16384'
    ConstraintDescription: Must be between 1GB and 16384GB.
  KeyPairName:
    Description: >-
      Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: 'AWS::EC2::KeyPair::KeyName'
  InstanceType:
    Description: Amazon EC2 instance type.
    Type: String
    Default: m4.2xlarge
    AllowedValues:
      - t2.micro
      - m3.xlarge
      - m3.medium
      - m3.2xlarge
      - m4.large
      - m4.2xlarge
  InstanceRole:
    Description: (Optional) IAM instance role to apply to the instance.  Suggest UTTE-INSTANCE-S3 in UTTE
    Type: String
    Default: 'UTTE-INSTANCE-S3'
  PrivateIp:
    Description: >-
      (Optional) Set a static, primary private IP. Leave blank to auto-select a
      free IP
    Type: String
    Default: ''
  NoPublicIp:
    Description: >-
      Controls whether to assign the instance a public IP. Recommended to leave
      at "false" _unless_ launching in a private subnet
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
  NoReboot:
    Description: >-
      Controls whether to reboot the instance as the last step of cfn-init
      execution
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
  NoUpdates:
    Description: >-
      Controls whether to run yum update during a stack update (on the initial
      instance launch, Watchmaker _always_ installs updates)
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
  SecurityGroupIds:
    Description: >-
      List of security groups to apply to the instance.  Create a security group before launch and select it here.
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
  SubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: >-
      ID of the subnet to assign to the instance.  Public subnet is required in order to complete application of STIG compliance.
  PypiIndexUrl:
    Description: URL to the PyPi Index
    Type: String
    Default: 'https://pypi.org/simple'
    AllowedPattern: '^http[s]?://.*$'
  WatchmakerConfig:
    Description: (Optional) URL to a Watchmaker config file
    Type: String
    Default: ''
    AllowedPattern: '^$|^http[s]?://.*$'
  WatchmakerEnvironment:
    Description: Environment in which the instance is being deployed
    Type: String
    Default: ''
    AllowedValues:
      - ''
      - dev
      - test
      - prod
  WatchmakerOuPath:
    Description: >-
      (Optional) DN of the OU to place the instance when joining a domain. If
      blank and "WatchmakerEnvironment" enforces a domain join, the instance
      will be placed in a default container. Leave blank if not joining a
      domain, or if "WatchmakerEnvironment" is "false"
    Type: String
    Default: ''
    AllowedPattern: '^$|^(OU=.+,)+(DC=.+)+$'
  WatchmakerComputerName:
    Description: (Optional) Sets the hostname/computername within the OS
    Type: String
    Default: ''
  WatchmakerAdminGroups:
    Description: >-
      (Optional) Colon-separated list of domain groups that should have admin
      permissions on the EC2 instance
    Type: String
    Default: ''
  WatchmakerAdminUsers:
    Description: >-
      (Optional) Colon-separated list of domain users that should have admin
      permissions on the EC2 instance
    Type: String
    Default: ''
  CfnEndpointUrl:
    Description: >-
      (Optional) URL to the CloudFormation Endpoint. e.g.
      https://cloudformation.us-gov-west-1.amazonaws.com
    Type: String
    Default: 'https://cloudformation.us-gov-west-1.amazonaws.com'
    AllowedPattern: '^$|^http[s]?://.*$'
  CfnGetPipUrl:
    Description: URL to get-pip.py
    Type: String
    Default: 'https://bootstrap.pypa.io/get-pip.py'
    AllowedPattern: '^http[s]?://.*\.py$'
  CfnBootstrapUtilsUrl:
    Description: URL to aws-cfn-bootstrap-latest.tar.gz
    Type: String
    Default: >-
      https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
    AllowedPattern: '^http[s]?://.*\.tar\.gz$'
  ToggleCfnInitUpdate:
    Description: >-
      A/B toggle that forces a change to instance metadata, triggering the
      cfn-init update sequence
    Type: String
    Default: A
    AllowedValues:
      - A
      - B
Conditions:
  ExecuteAppScript: !Not
    - !Equals
      - !Ref AppScriptUrl
      - ''
  CreateAppVolume: !Not
    - !Equals
      - !Ref AppVolumeDevice
      - ''
  UseWamConfig: !Not
    - !Equals
      - !Ref WatchmakerConfig
      - ''
  UseOuPath: !Not
    - !Equals
      - !Ref WatchmakerOuPath
      - ''
  UseComputerName: !Not
    - !Equals
      - !Ref WatchmakerComputerName
      - ''
  UseAdminGroups: !Not
    - !Equals
      - !Ref WatchmakerAdminGroups
      - ''
  UseAdminUsers: !Not
    - !Equals
      - !Ref WatchmakerAdminUsers
      - ''
  UseEnvironment: !Not
    - !Equals
      - !Ref WatchmakerEnvironment
      - ''
  UseCfnUrl: !Not
    - !Equals
      - !Ref CfnEndpointUrl
      - ''
  InstallUpdates: !Not
    - !Equals
      - !Ref NoUpdates
      - 'true'
  Reboot: !Not
    - !Equals
      - !Ref NoReboot
      - 'true'
  AssignInstanceRole: !Not
    - !Equals
      - !Ref InstanceRole
      - ''
  AssignStaticPrivateIp: !Not
    - !Equals
      - !Ref PrivateIp
      - ''
  AssignPublicIp: !Not
    - !Equals
      - !Ref NoPublicIp
      - 'true'
Mappings:
  Distro2RootDevice:
    AmazonLinux:
      DeviceName: xvda
    RedHat:
      DeviceName: sda1
    CentOS:
      DeviceName: sda1
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: EC2 Instance Configuration
        Parameters:
          - AmiId
          - AmiDistro
          - InstanceType
          - InstanceRole
          - KeyPairName
          - NoPublicIp
          - NoReboot
          - NoUpdates
          - SecurityGroupIds
      - Label:
          default: EC2 Watchmaker Configuration
        Parameters:
          - PypiIndexUrl
          - WatchmakerConfig
          - WatchmakerEnvironment
          - WatchmakerOuPath
          - WatchmakerComputerName
          - WatchmakerAdminGroups
          - WatchmakerAdminUsers
      - Label:
          default: EC2 Application Configuration
        Parameters:
          - AppScriptUrl
          - AppScriptParams
          - AppScriptShell
      - Label:
          default: EC2 Application EBS Volume
        Parameters:
          - AppVolumeDevice
          - AppVolumeMountPath
          - AppVolumeSize
          - AppVolumeType
      - Label:
          default: Network Configuration
        Parameters:
          - PrivateIp
          - SubnetId
      - Label:
          default: CloudFormation Configuration
        Parameters:
          - CfnEndpointUrl
          - CfnGetPipUrl
          - CfnBootstrapUtilsUrl
          - ToggleCfnInitUpdate
    ParameterLabels:
      ToggleCfnInitUpdate:
        default: Force Cfn Init Update
Resources:
  WatchmakerInstance:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT30M
    Metadata:
      ToggleCfnInitUpdate: !Ref ToggleCfnInitUpdate
      'AWS::CloudFormation::Authentication': !If
        - AssignInstanceRole
        - Ec2IamRole:
            type: S3
            roleName: !Ref InstanceRole
        - !Ref 'AWS::NoValue'
      'AWS::CloudFormation::Init':
        configSets:
          launch:
            - setup
            - watchmaker-install
            - watchmaker-launch
            - !If
              - ExecuteAppScript
              - make-app
              - !Ref 'AWS::NoValue'
            - finalize
            - !If
              - Reboot
              - reboot
              - !Ref 'AWS::NoValue'
          update:
            - setup
            - !If
              - InstallUpdates
              - install-updates
              - !Ref 'AWS::NoValue'
            - watchmaker-install
            - watchmaker-update
            - !If
              - ExecuteAppScript
              - make-app
              - !Ref 'AWS::NoValue'
            - finalize
            - !If
              - Reboot
              - reboot
              - !Ref 'AWS::NoValue'
        setup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

                  - !If
                    - AssignInstanceRole
                    - !Join
                      - ''
                      - - role=
                        - !Ref InstanceRole
                        - |+

                    - ''
                  - !If
                    - UseCfnUrl
                    - !Join
                      - ''
                      - - url=
                        - !Ref CfnEndpointUrl
                        - |+

                    - ''
                  - interval=1
                  - |+

                  - verbose=true
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.WatchmakerInstance.Metadata
                  - action=/opt/aws/bin/cfn-init -v -c update
                  - ' --stack '
                  - !Ref 'AWS::StackName'
                  - ' --resource WatchmakerInstance'
                  - !If
                    - AssignInstanceRole
                    - !Join
                      - ''
                      - - ' --role '
                        - !Ref InstanceRole
                    - ''
                  - !If
                    - UseCfnUrl
                    - !Join
                      - ''
                      - - ' --url '
                        - !Ref CfnEndpointUrl
                    - ''
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/scripts/watchmaker-install.sh:
              content: !Join
                - ''
                - - |+
                    #!/bin/bash

                  - PYPI_URL=
                  - !Ref PypiIndexUrl
                  - |+

                  - >
                    PYPI_HOST=$(echo $PYPI_URL |sed -e
                    "s/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/")
                  - pip install
                  - ' --index-url="$PYPI_URL"'
                  - ' --trusted-host="$PYPI_HOST"'
                  - |2+
                     --upgrade pip setuptools watchmaker

              mode: '000700'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install-updates:
          commands:
            10-install-updates:
              command: yum -y update
        watchmaker-install:
          commands:
            10-watchmaker-install:
              command: bash -xe /etc/cfn/scripts/watchmaker-install.sh
        watchmaker-launch:
          commands:
            10-watchmaker-launch:
              command: !Join
                - ''
                - - watchmaker --log-level debug
                  - ' --log-dir /var/log/watchmaker'
                  - ' --no-reboot'
                  - !If
                    - UseWamConfig
                    - !Join
                      - ''
                      - - ' --config "'
                        - !Ref WatchmakerConfig
                        - '"'
                    - ''
                  - !If
                    - UseEnvironment
                    - !Join
                      - ''
                      - - ' --env "'
                        - !Ref WatchmakerEnvironment
                        - '"'
                    - ''
                  - !If
                    - UseOuPath
                    - !Join
                      - ''
                      - - ' --ou-path "'
                        - !Ref WatchmakerOuPath
                        - '"'
                    - ''
                  - !If
                    - UseComputerName
                    - !Join
                      - ''
                      - - ' --computer-name "'
                        - !Ref WatchmakerComputerName
                        - '"'
                    - ''
                  - !If
                    - UseAdminGroups
                    - !Join
                      - ''
                      - - ' --admin-groups "'
                        - !Ref WatchmakerAdminGroups
                        - '"'
                    - ''
                  - !If
                    - UseAdminUsers
                    - !Join
                      - ''
                      - - ' --admin-users "'
                        - !Ref WatchmakerAdminUsers
                        - '"'
                    - ''
        watchmaker-update:
          commands:
            10-watchmaker-update:
              command: !Join
                - ''
                - - watchmaker --log-level debug
                  - ' --log-dir /var/log/watchmaker'
                  - ' --salt-states None'
                  - ' --no-reboot'
                  - !If
                    - UseWamConfig
                    - !Join
                      - ''
                      - - ' --config "'
                        - !Ref WatchmakerConfig
                        - '"'
                    - ''
                  - !If
                    - UseEnvironment
                    - !Join
                      - ''
                      - - ' --env "'
                        - !Ref WatchmakerEnvironment
                        - '"'
                    - ''
                  - !If
                    - UseOuPath
                    - !Join
                      - ''
                      - - ' --oupath "'
                        - !Ref WatchmakerOuPath
                        - '"'
                    - ''
                  - !If
                    - UseComputerName
                    - !Join
                      - ''
                      - - ' --computer-name "'
                        - !Ref WatchmakerComputerName
                        - '"'
                    - ''
                  - !If
                    - UseAdminGroups
                    - !Join
                      - ''
                      - - ' --admin-groups "'
                        - !Ref WatchmakerAdminGroups
                        - '"'
                    - ''
                  - !If
                    - UseAdminUsers
                    - !Join
                      - ''
                      - - ' --admin-users "'
                        - !Ref WatchmakerAdminUsers
                        - '"'
                    - ''
        make-app:
          files:
            /etc/cfn/scripts/make-app:
              source: !Ref AppScriptUrl
              mode: '000700'
              owner: root
              group: root
              authentication: Ec2IamRole
          commands:
            10-make-app:
              command: !Join
                - ''
                - - !Ref AppScriptShell
                  - ' /etc/cfn/scripts/make-app '
                  - !Ref AppScriptParams
        finalize:
          commands:
            10-signal-success:
              command: !Join
                - ''
                - - /opt/aws/bin/cfn-signal -e 0
                  - ' --stack '
                  - !Ref 'AWS::StackName'
                  - ' --resource WatchmakerInstance'
                  - !If
                    - AssignInstanceRole
                    - !Join
                      - ''
                      - - ' --role '
                        - !Ref InstanceRole
                    - ''
                  - !If
                    - UseCfnUrl
                    - !Join
                      - ''
                      - - ' --url '
                        - !Ref CfnEndpointUrl
                    - ''
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - |+

              ignoreErrors: 'true'
        reboot:
          commands:
            10-reboot:
              command: shutdown -r +1 &
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !If
        - AssignInstanceRole
        - !Ref InstanceRole
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
      BlockDeviceMappings:
        - DeviceName: !Join
            - ''
            - - /dev/
              - !FindInMap
                - Distro2RootDevice
                - !Ref AmiDistro
                - DeviceName
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: 'true'
        - !If
          - CreateAppVolume
          - DeviceName: !Ref AppVolumeDevice
            Ebs:
              VolumeSize: !Ref AppVolumeSize
              VolumeType: !Ref AppVolumeType
              DeleteOnTermination: 'true'
          - !Ref 'AWS::NoValue'
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: !If
            - AssignPublicIp
            - 'true'
            - 'false'
          PrivateIpAddress: !If
            - AssignStaticPrivateIp
            - !Ref PrivateIp
            - !Ref 'AWS::NoValue'
          GroupSet: !Ref SecurityGroupIds
          SubnetId: !Ref SubnetId
      UserData: !Base64
        'Fn::Join':
          - ''
          - - >
              Content-Type: multipart/mixed;
              boundary="===============3585321300151562773=="
            - |
              MIME-Version: 1.0
            - |+

            - |
              --===============3585321300151562773==
            - |
              Content-Type: text/cloud-config; charset="us-ascii"
            - |
              MIME-Version: 1.0
            - |
              Content-Transfer-Encoding: 7bit
            - |
              Content-Disposition: attachment; filename="cloud.cfg"
            - |+

            - |
              #cloud-config
            - !If
              - CreateAppVolume
              - !Join
                - ''
                - - |
                    bootcmd:
                  - '- cloud-init-per instance mkfs-appvolume mkfs -t ext4 '
                  - !Ref AppVolumeDevice
                  - |+

                  - |
                    mounts:
                  - '- [ '
                  - !Ref AppVolumeDevice
                  - ', '
                  - !Ref AppVolumeMountPath
                  - |2
                     ]
              - !Ref 'AWS::NoValue'
            - |+

            - |
              --===============3585321300151562773==
            - |
              Content-Type: text/x-shellscript; charset="us-ascii"
            - |
              MIME-Version: 1.0
            - |
              Content-Transfer-Encoding: 7bit
            - |
              Content-Disposition: attachment; filename="script.sh"
            - |+

            - |+
              #!/bin/bash -xe

            - |
              # Export cert bundle ENVs
            - |
              export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt
            - |+
              export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt

            - |
              # Get pip
            - 'curl --silent --show-error --retry 5 -L '
            - !Ref CfnGetPipUrl
            - ' | python - --index-url='
            - !Ref PypiIndexUrl
            - |+


            - |
              # Add pip to path
            - 'hash pip 2> /dev/null || '
            - 'PATH="${PATH}:/usr/local/bin"'
            - |+


            - |
              # Upgrade pip and setuptools
            - PYPI_URL=
            - !Ref PypiIndexUrl
            - |+

            - >
              PYPI_HOST=$(echo $PYPI_URL |sed -e
              "s/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/")
            - pip install
            - ' --index-url="$PYPI_URL"'
            - ' --trusted-host="$PYPI_HOST"'
            - |2+
               --upgrade pip setuptools

            - |
              # Fix python urllib3 warnings
            - |
              yum -y install gcc python-devel libffi-devel openssl-devel
            - pip install
            - ' --index-url="$PYPI_URL"'
            - ' --trusted-host="$PYPI_HOST"'
            - |2+
               --upgrade pyopenssl ndg-httpsclient pyasn1

            - |
              # Get cfn utils
            - pip install
            - ' --index-url="$PYPI_URL"'
            - ' --trusted-host="$PYPI_HOST"'
            - ' --upgrade '
            - !Ref CfnBootstrapUtilsUrl
            - |+


            - |
              # Remove gcc now that it is no longer needed
            - |+
              yum -y remove gcc --setopt=clean_requirements_on_remove=1

            - |
              # Fixup cfn utils
            - 'INITDIR=$(find -L /opt/aws/apitools/cfn-init/init -name redhat '
            - |
              2> /dev/null || echo /usr/init/redhat)
            - |
              chmod 775 ${INITDIR}/cfn-hup
            - |
              ln -f -s ${INITDIR}/cfn-hup /etc/rc.d/init.d/cfn-hup
            - |
              chkconfig --add cfn-hup
            - |
              chkconfig cfn-hup on
            - |
              mkdir -p /opt/aws/bin
            - 'BINDIR=$(find -L /opt/aws/apitools/cfn-init -name bin '
            - |
              2> /dev/null || echo /usr/bin)
            - 'for SCRIPT in cfn-elect-cmd-leader cfn-get-metadata cfn-hup '
            - |
              cfn-init cfn-send-cmd-event cfn-send-cmd-result cfn-signal
            - |
              do
            - '    ln -s ${BINDIR}/${SCRIPT} /opt/aws/bin/${SCRIPT} 2> /dev/null || '
            - |2
                  echo Skipped symbolic link, /opt/aws/bin/${SCRIPT} already exists
            - |+
              done

            - |
              # Add cfn-signal to path
            - 'hash cfn-signal 2> /dev/null || '
            - 'PATH="${PATH}:/usr/local/bin:/opt/aws/bin"'
            - |+


            - |
              # Execute cfn-init
            - /opt/aws/bin/cfn-init -v -c launch
            - ' --stack '
            - !Ref 'AWS::StackName'
            - ' --resource WatchmakerInstance'
            - !If
              - AssignInstanceRole
              - !Join
                - ''
                - - ' --role '
                  - !Ref InstanceRole
              - ''
            - !If
              - UseCfnUrl
              - !Join
                - ''
                - - ' --url '
                  - !Ref CfnEndpointUrl
              - ''
            - ' --region '
            - !Ref 'AWS::Region'
            - ' ||'
            - ' ( echo ''ERROR: cfn-init failed! Aborting!'';'
            - ' /opt/aws/bin/cfn-signal -e 1'
            - '  --stack '
            - !Ref 'AWS::StackName'
            - '  --resource WatchmakerInstance'
            - !If
              - AssignInstanceRole
              - !Join
                - ''
                - - ' --role '
                  - !Ref InstanceRole
              - ''
            - !If
              - UseCfnUrl
              - !Join
                - ''
                - - ' --url '
                  - !Ref CfnEndpointUrl
              - ''
            - '  --region '
            - !Ref 'AWS::Region'
            - ;
            - ' exit 1'
            - |2+
               )

            - '--===============3585321300151562773==--'
Outputs:
  WatchmakerInstanceId:
    Value: !Ref WatchmakerInstance
    Description: Instance ID
